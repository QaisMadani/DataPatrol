@page "/Groups/Edit/{GroupID}"
@using API.DTOs
@using System.Net.Http.Json
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Nav

<h3 class="mb-4">Edit Group “@GroupID”</h3>

@if (groupDto == null)
{
    <p><em>Loading…</em></p>
}
else
{
    <EditForm Model="groupDto" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Description</label>
            <InputText class="form-control" @bind-Value="groupDto.Description" />
        </div>

        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
            <button class="btn btn-primary me-2" type="submit">Save</button>
            <button class="btn btn-secondary" type="button"
                    @onclick='() => Nav.NavigateTo("/groups")'>
                Cancel
            </button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public string GroupID { get; set; } = "";
    private UpdateGroupDto? groupDto;
    private JsonNode errors = new JsonObject();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var api = ClientFactory.CreateClient("api");
            var grp = await api.GetFromJsonAsync<UserGroup>($"api/Group/{Uri.EscapeDataString(GroupID)}");
            groupDto = new() { Description = grp?.Description ?? "" };
        }
        catch (Exception ex)
        {
            errors["load"] = ex.Message;
        }
    }

    private async Task HandleSubmit()
    {
        if (groupDto is null) return;
        var api = ClientFactory.CreateClient("api");
        var resp = await api.PutAsJsonAsync(
          $"api/Group/{Uri.EscapeDataString(GroupID)}",
          groupDto);
        if (resp.IsSuccessStatusCode)
            Nav.NavigateTo("/Groups");
        else
            errors["save"] = await resp.Content.ReadAsStringAsync();
    }
}