@page "/Policies/Edit/{PolicyID}"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Nav

<h3 class="mb-4">Edit Policy “@PolicyID”</h3>

@if (policyDto == null) 
{
    <p><em>Loading…</em></p>
}
else
{
    <EditForm Model="policyDto" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value="policyDto.PolicyName" />
        </div>
        <div class="form-check mb-3">
            <InputCheckbox class="form-check-input" @bind-Value="policyDto.IsDefault" />
            <label class="form-check-label">Is Default</label>
        </div>
        <div class="mb-3">
            <label class="form-label">Type (int)</label>
            <InputNumber class="form-control" @bind-Value="policyDto.PolicyType" />
        </div>
        <div class="form-check mb-3">
            <InputCheckbox class="form-check-input" @bind-Value="policyDto.IsEnabled" />
            <label class="form-check-label">Is Enabled</label>
        </div>

        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
            <button class="btn btn-primary me-2" type="submit">Save</button>
            <button class="btn btn-secondary" type="button"
                    @onclick='() => Nav.NavigateTo("/Policies")'>
                Cancel
            </button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public string PolicyID { get; set; } = "";
    private UpdatePolicyDto? policyDto;
    private JsonNode errors = new JsonObject();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var api = ClientFactory.CreateClient("api");
            var pol = await api.GetFromJsonAsync<Policy>($"api/Policy/{Uri.EscapeDataString(PolicyID)}");
            policyDto = new()
            {
                PolicyName = pol?.PolicyName ?? "",
                IsDefault = pol?.IsDefault ?? false,
                PolicyType = pol?.PolicyType ?? 0,
                IsEnabled = pol?.IsEnabled ?? true
            };
        }
        catch (Exception ex)
        {
            errors["load"] = ex.Message;
        }
    }

    private async Task HandleSubmit()
    {
        if (policyDto is null) return;
        var api = ClientFactory.CreateClient("api");
        var resp = await api.PutAsJsonAsync(
          $"api/Policy/{Uri.EscapeDataString(PolicyID)}",
          policyDto);
        if (resp.IsSuccessStatusCode)
            Nav.NavigateTo("/Policies");
        else
            errors["save"] = await resp.Content.ReadAsStringAsync();
    }
}