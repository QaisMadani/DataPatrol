@* @inject IJSRuntime JS
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager
@page "/Users"

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5" Class="mb-4">Users</MudText>

    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               StartIcon="@Icons.Material.Filled.PersonAdd"
               Href="/Users/Create"
               Class="mb-4">
        New User
    </MudButton>

    @if (users == null)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else if (!users.Any())
    {
        <MudText><em>No users found.</em></MudText>
    }
    else
    {
        <MudTable Items="users" Hover="true" Dense="true" Elevation="0">
            <HeaderContent>
                <MudTh>User ID</MudTh>
                <MudTh>Enabled</MudTh>
                <MudTh>Username</MudTh>
                <MudTh>Created At</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate Context="user">
                <MudTd DataLabel="User ID">@user.UserId</MudTd>
                <MudTd DataLabel="Enabled">
                    @((user.IsEnabled) ? "✔️" : "❌")
                </MudTd>
                <MudTd DataLabel="Username">@user.Username</MudTd>
                <MudTd DataLabel="Created At">
                    @user.CreatedDateTime.ToLocalTime().ToString("g")
                </MudTd>
                <MudTd DataLabel="Actions">
                    
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }

    @foreach (var user in users ?? new List<User>())
    {
        <div class="modal fade" id="deleteModal-@user.UserId" tabindex="-1"
             aria-labelledby="deleteModalLabel-@user.UserId" aria-hidden="true">
        </div>

        <div class="modal fade" id="groupsModal-@user.UserId" tabindex="-1"
             aria-labelledby="groupsModalLabel-@user.UserId" aria-hidden="true">
        </div>
    }
</MudPaper>

@code {
    private HttpClient _api;
    private List<User>? users;
    private List<UserGroup>? allGroups;
    private Dictionary<string, HashSet<string>> selection = new();

    protected override void OnInitialized()
    {
        _api = ClientFactory.CreateClient("api");
        _ = LoadUsers();
        _ = LoadGroups();
    }

    private async Task LoadUsers()
    {
        users = await _api.GetFromJsonAsync<List<User>>("api/User");
        selection = users.ToDictionary(
            u => u.UserId,
            u => u.UserGroups.Select(ug => ug.GroupId).ToHashSet());
        StateHasChanged();
    }

    private async Task LoadGroups()
    {
        allGroups = await _api.GetFromJsonAsync<List<UserGroup>>("api/Group");
        StateHasChanged();
    }

    private async Task ToggleEnable(User user)
    {
        var resp = await _api.PutAsync(
            $"api/User/{Uri.EscapeDataString(user.UserId)}/toggle", null);
        if (resp.IsSuccessStatusCode)
        {
            user.IsEnabled = !user.IsEnabled;
            StateHasChanged();
        }
    }

    private Task ShowDeleteModal(string userId)
    {
        return JS.InvokeVoidAsync(
            "bootstrap.Modal.getOrCreateInstance",
            $"#deleteModal-{userId}"
        ).AsTask();
    }

    private Task ShowGroupsModal(string userId)
    {
        return JS.InvokeVoidAsync(
            "bootstrap.Modal.getOrCreateInstance",
            $"#groupsModal-{userId}"
        ).AsTask();
    }

    private async Task ConfirmDelete(string userId)
    {
        await _api.DeleteAsync($"api/User/{Uri.EscapeDataString(userId)}");
        await LoadUsers();
    }

    private async Task ConfirmAssign(string userId)
    {
        var ids = selection[userId].ToList();
        await _api.PostAsJsonAsync(
            $"api/User/{Uri.EscapeDataString(userId)}/groups",
            ids);
        await LoadUsers();
    }
} *@

@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager
@inject IJSRuntime JS
@page "/Users"

<h3>Users</h3>

<a class="btn btn-primary mb-3" href="/Users/Create"> New User</a>

@if (users == null)
{
    <p><em>Users Table is Empty</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User ID</th>
                <th>Enabled</th>
                <th>User Name</th>
                @* <th>User Groups</th>
                <th>Requests</th> *@
                <th>Created At</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.UserId</td>
                    <td>@(user.IsEnabled ? "✔️" : "❌")</td>
                    <td>@user.Username</td>
                    @* <td>@user.UserGroups</td>
                    <td>@user.UserRequests</td> *@
                    <td>@user.CreatedDateTime.ToLocalTime().ToString("g")</td>
                    <td style="white-space: nowrap">

                        <button class="btn btn-sm @(user.IsEnabled ? "btn-warning" : "btn-success")"
                                @onclick="() => ToggleEnable(user)">
                            @(user.IsEnabled ? "Disable" : "Enable")
                        </button>

                        <button class="btn btn-sm btn-danger ms-1"
                                data-bs-toggle="modal"
                                data-bs-target="#deleteModal-@user.UserId">
                            Delete
                        </button>
                        <button class="btn btn-sm btn-info ms-1"
                                data-bs-toggle="modal"
                                data-bs-target="#groupsModal-@user.UserId">
                            Groups
                        </button>

                        <button class="btn btn-sm btn-secondary ms-1"
                                @onclick="() => GoToRequests(user.UserId)">
                            Requests
                        </button>

                    </td>

                    <td style="white-space: nowrap">
                        <a class="btn btn-primary btn-sm" href="/Users/Edit/@user.UserId">Edit</a>
                        @* <a class="btn btn-danger btn-sm" href="/Users/Delete/@user.UserId">Delete</a> *@
                    </td>
                </tr>

                <div class="modal fade" id="deleteModal-@user.UserId" tabindex="-1"
                     aria-labelledby="deleteModalLabel-@user.UserId" aria-hidden="true">
                    <div class="modal-dialog modal-sm">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="deleteModalLabel-@user.UserId">
                                    Confirm Delete
                                </h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"
                                        aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                Are you sure you want to delete <strong>@user.Username</strong>?
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary btn-sm"
                                        data-bs-dismiss="modal">
                                    Cancel
                                </button>
                                <button type="button" class="btn btn-danger btn-sm"
                                        @onclick="() => ConfirmDelete(user.UserId)"
                                        data-bs-dismiss="modal">
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </tbody>
    </table>

    @foreach (var user in users!)
    {
        <div class="modal fade" id="groupsModal-@user.UserId" tabindex="-1"
             aria-labelledby="groupsModalLabel-@user.UserId" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="groupsModalLabel-@user.UserId">
                            Assign Groups for @user.Username
                        </h5>
                        <button type="button" class="btn-close"
                                data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        @foreach (var grp in allGroups!)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox"
                                       id="chk-@user.UserId-@grp.GroupId"
                                       @onchange="e => {
                                       if ((bool)e.Value) selection[user.UserId].Add(grp.GroupId);
                                       else selection[user.UserId].Remove(grp.GroupId);
                                   }"
                                     checked="@selection[user.UserId].Contains(grp.GroupId)" />
                              <label class="form-check-label" for="chk-@user.UserId-@grp.GroupId">
                                  @grp.Description
                              </label>
                          </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-sm"
                            data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-primary btn-sm"
                            @onclick="() => ConfirmAssign(user.UserId)"
                            data-bs-dismiss="modal">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
}
}

@code {
    private List<User>? users;
    private List<UserGroup>? allGroups;
    private Dictionary<string, HashSet<string>> selection
        = new Dictionary<string, HashSet<string>>();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await LoadGroups();
    }

    private async Task LoadUsers()
    {
        // users = await Http.GetFromJsonAsync<List<User>>("http://localhost:5116/api/User");

        var api = ClientFactory.CreateClient("api");
        users = await api.GetFromJsonAsync<List<User>>("api/User");
        selection = users
          .ToDictionary(u => u.UserId,
                        u => u.UserGroups.Select(ug => ug.GroupId).ToHashSet());
    }

    private async Task LoadGroups()
    {
        // allGroups = await Http.GetFromJsonAsync<List<UserGroup>>("http://localhost:5116/api/Group");
        var api = ClientFactory.CreateClient("api");
        allGroups = await api.GetFromJsonAsync<List<UserGroup>>("api/Group");

    }

    private async Task ConfirmAssign(string userId)
    {
        var api = ClientFactory.CreateClient("api");
        var groupIds = selection[userId].ToList();
        await api.PostAsJsonAsync($"api/User/{Uri.EscapeDataString(userId)}/groups", groupIds);
        await LoadUsers();
    }

    private async Task ConfirmDelete(string userId)
    {
        var api = ClientFactory.CreateClient("api");
        await api.DeleteAsync($"api/User/{Uri.EscapeDataString(userId)}");
        await LoadUsers();
    }

    private async Task ToggleEnable(User user)
    {
        var api = ClientFactory.CreateClient("api");
        var resp = await api.PutAsync($"api/User/{Uri.EscapeDataString(user.UserId)}/toggle", null);
        if (resp.IsSuccessStatusCode)
        {
            user.IsEnabled = !user.IsEnabled;
            StateHasChanged();
        }
    }

    private async Task GoToRequests(string userId)
    {
        await JS.InvokeVoidAsync("console.log", $"[DEBUG] Nav to /Requests/{userId}");

        NavManager.NavigateTo($"/Requests/{Uri.EscapeDataString(userId)}");
    }

}